name: colcon-action (macos)
description: macOS build of a colcon workspace
inputs:
  before-script:        { required: false, default: '' }
  ccache-prefix:        { required: false, default: '' }
  ccache-enabled:       { required: false, default: 'true' }
  rosdep-enabled:       { required: false, default: 'true' }
  rosdep-install-args:  { required: false, default: '-iry' }
  add-ros-ppa:          { required: false, default: 'true' }
  vcs-file:             { required: false, default: '' }
  upstream-args:        { required: false, default: '' }
  target-path:          { required: false, default: '' }
  target-args:          { required: false, default: '' }
  run-tests:            { required: false, default: 'true' }
  run-tests-args:       { required: false, default: '' }

runs:
  using: composite
  steps:
    - name: Install base deps
      shell: bash
      run: |
        brew update
        brew install cmake curl git python3

    - name: Install colcon deps
      shell: bash
      run: |
        python3 -m pip install vcstool colcon-common-extensions ninja --break-system-packages

    - name: rosdep init & update
      if: inputs.rosdep-enabled == 'true'
      shell: bash
      run: |
        python3 -m pip install rosdep --break-system-packages
        sudo rosdep init || true
        rosdep update --include-eol-distros

    - name: Install ccache
      if: inputs.ccache-enabled == 'true'
      shell: bash
      run: brew install ccache

    - name: Prepare ccache timestamp
      if: inputs.ccache-enabled == 'true'
      id: ccache_timestamp_macos
      shell: bash
      run: |
        date -u +"::set-output name=timestamp::%Y-%m-%d-%H;%M;%S"

    - name: Restore cache
      if: inputs.ccache-enabled == 'true'
      uses: actions/cache@v4
      with:
        path: ${{ inputs.ccache-prefix }}/.ccache
        key:   ${{ inputs.ccache-prefix }}-macos-ccache-${{ steps.ccache_timestamp_macos.outputs.timestamp }}
        restore-keys: |
          ${{ inputs.ccache-prefix }}-macos-ccache-

    - name: Build upstream workspace
      if: inputs.vcs-file != ''
      shell: bash
      run: |
        ${{ inputs.before-script }}
        mkdir -p $GITHUB_WORKSPACE/upstream_ws/src
        vcs import --input "$GITHUB_WORKSPACE/${{ inputs.target-path }}/${{ inputs.vcs-file }}" $GITHUB_WORKSPACE/upstream_ws/src
        if [ $? -ge 1 ]; then return 1; fi
        cd $GITHUB_WORKSPACE/upstream_ws
        if [ "${{ inputs.rosdep-enabled }}" = "true" ]]; then
          rosdep install --from-paths src ${{ inputs.rosdep-install-args }}
        fi
        if [ "${{ inputs.ccache-enabled }}" = "true" ]]; then
          colcon build --event-handlers desktop_notification- status- terminal_title- --cmake-args -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ${{ inputs.target-args }}
        else
          colcon build --event-handlers desktop_notification- status- terminal_title- --cmake-args ${{ inputs.target-args }}
        fi
        if [ $? -ge 1 ]; then return 1; fi

    - name: Build target workspace
      shell: bash
      run: |
        ${{ inputs.before-script }}
        if [ "${{ inputs.vcs-file }}" != "" ]; then
          source $GITHUB_WORKSPACE/upstream_ws/install/setup.bash
        fi
        cd $GITHUB_WORKSPACE/${{ inputs.target-path }}/../
        if [ "${{ inputs.rosdep-enabled }}" = "true" ]]; then
          rosdep install --from-paths src ${{ inputs.rosdep-install-args }}
        fi
        if [ "${{ inputs.ccache-enabled }}" = "true" ]]; then
          colcon build --event-handlers desktop_notification- status- terminal_title- --cmake-args -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ${{ inputs.target-args }}
        else
          colcon build --event-handlers desktop_notification- status- terminal_title- --cmake-args ${{ inputs.target-args }}
        fi
        if [ $? -ge 1 ]; then return 1; fi

    - name: Run tests
      if: inputs.run-tests == 'true'
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/${{ inputs.target-path }}/../
        source install/setup.bash
        colcon test --event-handlers console_direct+ --return-code-on-test-failure ${{ inputs.run-tests-args }}
        if [ $? -ge 1 ]; then return 1; fi
        colcon test-result --verbose
        if [ $? -ge 1 ]; then return 1; fi
